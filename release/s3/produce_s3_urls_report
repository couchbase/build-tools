#!/usr/bin/env python3

"""
Update the given JIRA approval ticket with a list of the binaries
for the given product and release.  The list is generated from
accessing the S3 bucket packages.couchbase.com (via boto) and excluding
undesired entries.

Additionally, include any product-specific URLs for the Downloads page.
"""

import argparse
import json
import os
import re
import sys
import boto3

from jira import JIRA

# List of file regexes to always exclude. Some other patterns (notably
# .sha256) are handled separately, so don't add those here.
exclude_regexes = [
  r'manifest.*\.xml$',
  r'.jar$',
  r'.jar.sha256$',
  r'.aar$',
  r'.aar.sha256$',
  r'doc[^k]',
  r'carthage',
  r'unsigned'
]


def connect_jira():
  """
  /home/couchbase/.ssh/cloud-jira-creds.json is used to authenticate to jira cloud.
  It contains:
      username
      apitoken
      url
      cloud=true
  """

  cloud_jira_creds_file = '/home/couchbase/.ssh/cloud-jira-creds.json'
  cloud_jira_creds = json.loads(open(cloud_jira_creds_file).read())
  return JIRA(cloud_jira_creds['url'], basic_auth=(
              f"{cloud_jira_creds['username']}",
              f"{cloud_jira_creds['apitoken']}"))

def get_url_list(product, version, editions, hide_community, staging):
  """
  Extract list of binaries from S3 for the given product and version,
  excluding certain files (such as MD5/SHA files)
  """

  # Handle path differences on S3 / internal release mirror
  if product == 'couchbase-server':
    s3_dir = 'releases'
  elif product == 'sync_gateway':
    s3_dir = 'releases/couchbase-sync-gateway'
  elif product == 'cb-non-package-installer':
    s3_dir = 'cb-non-package-installer'
  else:
    s3_dir = f'releases/{product}'

  # Force EE/CE split for couchbase-server
  if product == 'couchbase-server':
    editions = True

  # Product-specific exclude lists (hopefully few)
  if product == 'couchbase-lite-java':
    exclude_regexes.extend([r'macos.zip$', r'windows.zip$', r'macos.zip.sha256$', r'windows.zip.sha256$'])
  if product == 'couchbase-lite-vector-search':
    exclude_regexes.extend([r'android.*', r'apple.*', r'linux.*', r'macos.*', r'xcframework*', r'windows.*'])
  if product != 'couchbase-operator':
    # We upload this file for all k8s products, but only want to report the
    # URL for couchbase-operator
    exclude_regexes.extend([f"^{product}-image_"])

  if staging:
    s3_bucket = 'packages-staging.couchbase.com'
    transport = 'http'
  else:
    s3_bucket = 'packages.couchbase.com'
    transport = 'https'
  s3_rel_prefix = f'{s3_dir}/{version}/'
  print(f"Getting S3 URLs from bucket {s3_bucket}, prefix {s3_rel_prefix}...")

  # Generate list of files from s3 for given release. This expects AWS
  # credentials in the standard location (~/.aws/credentials).
  s3 = boto3.resource('s3')
  packages = s3.Bucket(s3_bucket)
  releases = packages.objects.filter(Prefix=s3_rel_prefix)
  rel_files = [f.key.split('/')[-1] for f in releases.all()]
  if len(rel_files) == 0:
    print(f"{product} {version} has no files on S3!")
    sys.exit(1)

  # We pre-set this layout to take advantage of the Python 3.7+ feature
  # that dicts retain insertion ordering. That way, the report will
  # always be ordered the way we expect. It is OK to include keys that
  # may not be used; they will be omitted in the final report.
  model_keys = ["Binaries", "Debug Binaries", "Docker Images", "Binaries SHAs", "Debug Binaries SHAs", "Docker Images SHAs"]
  urls = {
    'Enterprise': {k:[] for k in model_keys},
    'Community': {k:[] for k in model_keys},
    'Tools': {k:[] for k in model_keys},
    'Artifact': {k:[] for k in model_keys},
    'Release': {
      "Notices File": []
    },
    'Downloads Page': {
    },
  }

  # Pre-compile all regexes, just to be neat
  excl_re = [re.compile(x, flags=re.IGNORECASE) for x in exclude_regexes]
  dbg_re = re.compile(r'dbg_|dbgsym_|debuginfo-|PDB')
  ee_re = re.compile(r'\bee\b|enterprise', flags=re.IGNORECASE)
  ce_re = re.compile(r'community', flags=re.IGNORECASE)
  tools_re = re.compile(r'tools', flags=re.IGNORECASE)
  docker_re = re.compile(r'docker\.tar|rhcc\.tar', flags=re.IGNORECASE)
  notices_re = re.compile(r'notices\.txt', flags=re.IGNORECASE)
  sha_re = re.compile(r'\.sha256$|\.md5$')

  # Separate out files into distinct sets
  for rfile in rel_files:
    # Check for always-exclude patterns
    if any(x.search(rfile) is not None for x in excl_re):
      continue

    file_url = f'{transport}://{s3_bucket}/{s3_rel_prefix}{rfile}'

    # Identify any release-wide files first, before diving into
    # edition-specific files
    if notices_re.search(rfile):
      urls['Release']['Notices File'].append(file_url)
      continue

    # Sort uploads depending on whether the product has EE/CE or not.
    if editions:
      # Sort files into EE, CE, and Tools; skip files that aren't
      # explicitly any of those.
      if ee_re.search(rfile):
        urllist = urls['Enterprise']
      elif (not hide_community and ce_re.search(rfile)):
        urllist = urls['Community']
      elif tools_re.search(rfile):
        urllist = urls['Tools']
      else:
        continue
    else:
      urllist = urls['Artifact']

    # Determine which list to add this URL to
    if docker_re.search(rfile):
      key = 'Docker Images'
    elif dbg_re.search(rfile):
      key = 'Debug Binaries'
    else:
      key = 'Binaries'
    if sha_re.search(rfile):
      key = f'{key} SHAs'
    urllist[key].append(file_url)

  return urls


def get_product_download_urls(product, version):
  """
  Returns a dict mapping types of download URLs to lists of URLs. This is
  product-specific, and intended to tell the web team what URL to put on the
  Downloads page when the actual artifact URL isn't desired.
  """

  match product:
    case "couchbase-lite-net":
      return {
        "Couchbase Lite .NET Enterprise": [
          f"https://www.nuget.org/packages/Couchbase.Lite.Enterprise/{version}"
        ],
        "Couchbase Lite .NET Community": [
          f"https://www.nuget.org/packages/Couchbase.Lite/{version}"
        ]
      }
    case "couchbase-lite-ios":
      return {
        "Objective C": [
          f"https://docs.couchbase.com/couchbase-lite/current/objc/gs-install.html"
        ],
        "Swift": [
          f"https://docs.couchbase.com/couchbase-lite/current/swift/gs-install.html"
        ]
      }
    case "couchbase-lite-android":
      return {
        "Couchbase Lite Android Java": [
          f"https://docs.couchbase.com/couchbase-lite/current/android/gs-install.html#java-step-by-step-install"
        ],
        "Couchbase Lite Android Kotlin": [
          f"https://docs.couchbase.com/couchbase-lite/current/android/gs-install.html#kotlin-step-by-step-install"
        ]
      }
    case "couchbase-lite-java":
      return {
        "Couchbase Lite Java": [
          f"https://docs.couchbase.com/couchbase-lite/current/java/gs-install.html"
        ]
      }
    case "couchbase-lite-c":
      return {
        "Couchbase Lite C for Linux": [
          f"https://docs.couchbase.com/couchbase-lite/current/c/gs-downloads.html"
        ],
        "Couchbase Lite C for macOS": [
          f"https://docs.couchbase.com/couchbase-lite/current/c/gs-downloads.html"
        ]
      }
    case "couchbase-lite-vector-search":
      return {
        "Couchbase Lite .Net Vector Search": [
          f"https://docs.couchbase.com/couchbase-lite/current/csharp/gs-install.html"
        ],
        "Couchbase Lite Android Vector Search": [
          f"https://docs.couchbase.com/couchbase-lite/current/android/gs-install.html"
        ],
        "Couchbase Lite C Vector Search": [
          f"https://docs.couchbase.com/couchbase-lite/current/c/gs-install.html"
        ],
        "Couchbase Lite Java Vector Search": [
          f"https://docs.couchbase.com/couchbase-lite/current/java/gs-install.html"
        ],
        "Couchbase Lite Objective-C Vector Search": [
          f"https://docs.couchbase.com/couchbase-lite/current/objc/gs-install.html"
        ],
        "Couchbase Lite Swift Vector Search": [
          f"https://docs.couchbase.com/couchbase-lite/current/swift/gs-install.html"
        ]
      }
    case _:
      return {}


def md_list(strarray):
  """
  Renders an array of strings as a single Markdown-compatible bullet list
  """

  return "* " + '\n* '.join(strarray)


def form_comment(urls, product, version, bldnum):
  """Update the JIRA approval ticket with the list of binaries"""

  content = f'{product} {version}-{bldnum} on S3\n'
  content += '==============\n\n'

  for edition, listkeys in urls.items():
    # If no URLs to list for a given edition, skip it
    if all(len(x) == 0 for x in listkeys.values()):
      continue

    content += f'{edition} URLs:\n'
    content += '--------------\n\n'

    for listkey, urls in listkeys.items():
      if len(urls) == 0:
        continue

      content += f'{listkey}:\n\n{md_list(urls)}\n\n'

  return content


def update_jira_ticket(issue, content):
  """
  Post comment on Jira ticket with specified content
  """

  print(f"Posting URL list on Jira ticket {issue}...")
  jira = connect_jira()
  jira.add_comment(issue, content,
                   visibility={'type': 'group', 'value': 'Membase Inc'})
  print("Done!")


if __name__ == '__main__':
  parser = argparse.ArgumentParser(
    description='Update JIRA approval ticket for product uploads'
  )
  parser.add_argument('product', type=str, help='Product to check')
  parser.add_argument('version', type=str, help='Version of product')
  parser.add_argument('bldnum', type=str, help='Build number')
  parser.add_argument(
    '--editions', action="store_true",
    help="Split EE/CE artifacts (default for Server, otherwise not)"
  )
  parser.add_argument(
    "--hide-community", action="store_true",
    help="Hide Community URLs from report (only valid with --editions)"
  )
  parser.add_argument(
    '--staging', action="store_true", help="URLs from packages-staging"
  )
  parser.add_argument('--issue', type=str, help='Approval ticket for version')
  parser.add_argument('--profile', type=str, help='AWS credentials profile')
  args = parser.parse_args()

  if args.profile:
    boto3.setup_default_session(profile_name=args.profile)

  # Get the set of S3 URLs
  urls = get_url_list(
    args.product, args.version,
    args.editions, args.hide_community,
    args.staging
  )

  # Extend with any product-specific URLs
  urls['Downloads Page'].update(get_product_download_urls(args.product, args.version))

  # Convert to a useful Jira comment
  content = form_comment(urls, args.product, args.version, args.bldnum)
  print(content)
  if args.issue is not None:
    update_jira_ticket(args.issue, content)
